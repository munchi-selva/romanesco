#!/usr/bin/env python3

import os
import sys
import logging
import argparse

from romanesco import const as C
from romanesco import config


# trying to control tensorflow logging level
import tensorflow as tf
tf.logging.set_verbosity(tf.logging.ERROR)


def get_argument_parser():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest='action', help='A vanilla recurrent '
                                       'neural network (RNN) language model')
    parser.add_argument('-q', '--quiet', action='store_true',
                        help='No logging output except for warnings and errors.')
    # train
    train = subparsers.add_parser('train', help='Train a language model.')
    train.add_argument('data', help='the training data, a plain text file.')
    train.add_argument('-e', '--epochs', type=int, default=C.NUM_EPOCHS,
                       help='the number of training epochs. (default: %(default)s)')
    train.add_argument('-b', '--batch_size', type=int, default=C.BATCH_SIZE,
                       help='Number of sequences in a batch. (default: %(default)s)')
    train.add_argument('--num_steps', type=int, default=C.NUM_STEPS,
                       help='Max length of sequences considered for training. (default: %(default)s)')
    train.add_argument('--hidden_size', type=int, default=C.HIDDEN_SIZE,
                       help='Size of RNN hidden states. (default: %(default)s)')
    train.add_argument('--embedding_size', type=int, default=C.EMBEDDING_SIZE,
                       help='Size of embedding vectors. (default: %(default)s)')
    train.add_argument('-v', '--vocab_max_size', type=int, default=C.VOCAB_SIZE,
                       help='Only keep n most frequent words; treat others as <unk>. (default: %(default)s)')
    train.add_argument('-m', '--save_to', default=C.MODEL_PATH,
                       help='the folder to store model files. (default: %(default)s)')
    train.add_argument('-l', '--log_to', default=C.LOGS_PATH,
                       help='the folder to store log files. Use for monitoring with tensorboard. (default: %(default)s)')
    # score
    score = subparsers.add_parser('score', help='Use a trained model to score a text.')
    score.add_argument('data', help='the data to be scored, a plain text file.')
    score.add_argument('-m', '--load_from', default='model',
                       help='the folder to load model and vocabulary files from. (default: %(default)s)')
    score.add_argument('-b', '--batch_size', type=int, default=C.BATCH_SIZE,
                       help='Number of sequences in a batch. (default: %(default)s)')
    # sample
    sample = subparsers.add_parser('sample', help='Use a trained model to generate a new text.')
    sample.add_argument('length', type=int, default=C.SAMPLE_LENGTH, help='the number of '
                        'symbols to be sampled, i.e., the length of the resulting text. (default: %(default)s)')
    sample.add_argument('-m', '--load_from', default=C.MODEL_PATH,
                        help='the folder to load model and vocabulary files from. (default: %(default)s)')
    sample.add_argument('-f', '--first_symbols', type=lambda s: s.split(" "), default=[],
                        help='the first symbols of the text to be generated. (default: %(default)s)')

    return parser


def action_train(args):
    # create folders for model and logs if they don't exist yet
    for folder in [args.save_to, args.log_to]:
        if not os.path.exists(folder):
            os.makedirs(folder)

    # save args for inference
    config_path = os.path.join(args.save_to, C.CONFIG_FILENAME)
    config.save_config(args, config_path)

    from romanesco.train import train
    train(**vars(args))


def action_score(args):
    from romanesco.score import score
    perplexity = score(**vars(args))
    print('Perplexity: {0:.2f}'.format(perplexity))


def action_sample(args):
    from romanesco.sample import sample
    generated_text = sample(**vars(args))
    print(generated_text)


def setup_logging(args):
    log_level = logging.WARNING if args.quiet else logging.DEBUG
    logging.basicConfig(level=log_level, format='%(asctime)s - %(levelname)s - %(message)s')

    logging.info(args)


def main():
    parser = get_argument_parser()
    if len(sys.argv) <= 1:
        parser.print_help()
        sys.exit()
    args = parser.parse_args()

    setup_logging(args)


    # delegate
    if args.action == 'train':
        action_train(args)
    else:
        # load args of trained model
        config_path = os.path.join(args.load_from, C.CONFIG_FILENAME)
        args = config.update_namespace_from_config(args, config_path)

        if args.action == 'score':
            action_score(args)
        elif args.action == 'sample':
            action_sample(args)


if __name__ == '__main__':
    main()
